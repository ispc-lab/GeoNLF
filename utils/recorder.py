import torch

# Recording the pose optimizing process during bundle-adjusting training and pure graph-based pose optimization
# NOTE:
# After pose optimization, there may still be a certain degree of offset relative to the ground truth (GT) pose, 
# thus requiring the use of the Sim(3) algorithm for alignment. 
# However: The Sim(3) alignment should not be applied during the optimization process before the pose has fully 
# converged, as this could lead to significant fitting errors. Given that all poses are generated by adding noise 
# to the GT poses, the final offset is expected to be small. Therefore, directly calculating the error between 
# the predicted pose and GT pose for each frame is still of some reference value. 

class recorder():
    def __init__(self,model):
        self.model=model
        
    def save_train_pose(self,loader):
        self.model.eval()
        with torch.no_grad():
            for i,data in enumerate(loader):
                self.model.save_pose(data["index"],data["pose"])  

    def cal_rre_rte(self,pose,gt_pose):
        R_gt=gt_pose[0,:3,:3]
        R=pose[0,:3,:3]
        t_gt=gt_pose[0,:3,3]
        t=pose[0,:3,3]

        tmp = (torch.trace(torch.matmul(R.transpose(0,1),R_gt))-1) / 2
        tmp = torch.clip(tmp, -1.0, 1.0)  
        rre=torch.acos(tmp).item()
        rte=torch.norm(t_gt-t,p=2).item()
        return rre,rte
    
    def cal_pose_error(self,data):
        idx=data["index"]
        gt_pose=data["pose"]
        new_pose=self.model.get_pose(data["index"],data["pose"])
        rre,rte=self.cal_rre_rte(new_pose,gt_pose)
        self.model.rre[idx].append(rre)
        self.model.rte[idx].append(rte)

    def cal_pose_error_when_graph_optim(self,loader):
        for data in loader:
            idx=data["index"]
            gt_pose=data["pose"]
            pose_new=self.model.get_pose(data["index"],data["pose"])
            rre,rte=self.cal_rre_rte(pose_new,gt_pose)
            self.model.rre_when_graph_optim[idx].append(rre)
            self.model.rte_when_graph_optim[idx].append(rte)
